services:
  # --- Vector Database ---
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - salomon-net
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Backend API ---
  core-api:
    build:
      context: ./services/core-api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - uploads_volume:/uploads # Volumen para compartir archivos con el parser
    env_file:
      - .env
    environment:
      PORT: ${CORE_API_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - salomon-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # --- Frontend Application ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      PORT: ${FRONTEND_PORT}
    networks:
      - salomon-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Python Microservices ---
  parsing-engine:
    build:
      context: ./services/parsing-engine
      dockerfile: Dockerfile
    volumes:
      - ./services/parsing-engine:/app
      - uploads_volume:/uploads
      - models_volume:/models
    env_file:
      - .env
    depends_on:
      - kafka
      - core-api
    networks:
      - salomon-net
    command: python src/consumer.py

  recommendation-engine:
    build:
      context: ./services/recommendation-engine
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./services/recommendation-engine:/app
    env_file:
      - .env
    networks:
      - salomon-net
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] # Asume que tienes un endpoint /health
      interval: 15s
      timeout: 5s
      retries: 3

  financial-connector:
    build:
      context: ./services/financial-connector
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    volumes:
      - ./services/financial-connector:/app
    env_file:
      - .env
    networks:
      - salomon-net
    command: uvicorn server:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  conversation-engine:
    build:
      context: ./services/conversation-engine
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    networks:
      - salomon-net
    depends_on:
      core-api:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  forecasting-engine:
    build:
      context: ./services/forecasting-engine
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    env_file:
      - .env
    environment:
      FORECASTING_DATABASE_URL: ${FORECASTING_DATABASE_URL}
      FORECASTING_DEFAULT_MODEL: ${FORECASTING_DEFAULT_MODEL}
      FORECASTING_DEFAULT_HORIZON_DAYS: ${FORECASTING_DEFAULT_HORIZON_DAYS}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - salomon-net
    command: uvicorn app.main:app --host 0.0.0.0 --port 8003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  voice-gateway:
    build:
      context: ./services/voice-gateway
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    env_file:
      - .env
    networks:
      - salomon-net
    depends_on:
      - conversation-engine
    command: uvicorn app.main:app --host 0.0.0.0 --port 8100
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Infrastructure ---
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - salomon-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    networks:
      - salomon-net
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    networks:
      - salomon-net
    depends_on:
      - zookeeper
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
    healthcheck:
      test: "cub kafka-ready -b localhost:9092 1 1"
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
      - "29092:29092"

networks:
  salomon-net:
    driver: bridge

volumes:
  pgdata:
  qdrant_data:
  uploads_volume:
  models_volume:
