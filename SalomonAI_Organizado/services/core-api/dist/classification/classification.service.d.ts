import { OnModuleInit } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { ClassifyTransactionDto, TrainTransactionDto, CorrectClassificationDto, ClassificationResultDto } from './dto/transaction.dto';
import { NlpService } from '../nlp/nlp.service';
import { QdrantService } from '../qdrant/qdrant.service';
export declare class ClassificationService implements OnModuleInit {
    private readonly nlpService;
    private readonly qdrantService;
    private readonly eventEmitter;
    private readonly logger;
    private readonly COLLECTION_NAME;
    private readonly SIMILARITY_THRESHOLD;
    private readonly MIN_CONFIDENCE_THRESHOLD;
    private readonly BATCH_SIZE;
    private totalClassifications;
    private correctPredictions;
    private readonly classificationHistory;
    private readonly classificationCache;
    private readonly maxCacheSize;
    private readonly fallbackRules;
    constructor(nlpService: NlpService, qdrantService: QdrantService, eventEmitter: EventEmitter2);
    onModuleInit(): Promise<void>;
    private initializeModel;
    private loadInitialTrainingData;
    classifyTransaction(dto: ClassifyTransactionDto): Promise<ClassificationResultDto>;
    private determineMLClassification;
    private applyAmountBasedAdjustments;
    private determineFallbackClassification;
    trainModel(dto: TrainTransactionDto): Promise<void>;
    correctClassification(dto: CorrectClassificationDto): Promise<void>;
    private generateCacheKey;
    private saveToCache;
    private recordClassification;
    private recordCorrection;
    performDailyMaintenance(): Promise<void>;
    getModelMetrics(): {
        totalClassifications: number;
        accuracy: number;
        cacheSize: number;
        modelVersion: string;
        collectionName: string;
        recentClassifications: number;
    };
    handleClassificationCorrected(payload: any): Promise<void>;
}
