import { Repository } from 'typeorm';
import { CookiePreference } from './entities/cookie-preference.entity';
import { ConsentLog } from './entities/consent-log.entity';
import { DataInventory, DataInventoryStatus } from './entities/data-inventory.entity';
import { DsarRequest } from './entities/dsar-request.entity';
import { RetentionPolicy } from './entities/retention-policy.entity';
import { PrivacyAuditLog } from './entities/privacy-audit-log.entity';
import { CreateDataInventoryDto } from './dto/create-data-inventory.dto';
import { UpdateDataInventoryStatusDto } from './dto/update-data-inventory-status.dto';
import { CreateRetentionPolicyDto } from './dto/create-retention-policy.dto';
import { UpdateRetentionPolicyDto } from './dto/update-retention-policy.dto';
import { LogConsentDto } from './dto/log-consent.dto';
import { UpdateConsentStatusDto } from './dto/update-consent-status.dto';
import { CreateDsarRequestDto } from './dto/create-dsar-request.dto';
import { ResolveDsarRequestDto } from './dto/resolve-dsar-request.dto';
import { SyncCookiePreferencesDto } from './dto/sync-cookie-preferences.dto';
interface InventoryFilters {
    dataSubjectId?: string;
    dataCategory?: string;
    status?: DataInventoryStatus;
}
export declare class PrivacyService {
    private readonly dataInventoryRepository;
    private readonly retentionPolicyRepository;
    private readonly consentLogRepository;
    private readonly dsarRequestRepository;
    private readonly cookiePreferenceRepository;
    private readonly privacyAuditRepository;
    private readonly logger;
    constructor(dataInventoryRepository: Repository<DataInventory>, retentionPolicyRepository: Repository<RetentionPolicy>, consentLogRepository: Repository<ConsentLog>, dsarRequestRepository: Repository<DsarRequest>, cookiePreferenceRepository: Repository<CookiePreference>, privacyAuditRepository: Repository<PrivacyAuditLog>);
    getDataInventory(filters?: InventoryFilters): Promise<DataInventory[]>;
    createDataInventory(dto: CreateDataInventoryDto): Promise<DataInventory>;
    updateDataInventoryStatus(id: string, dto: UpdateDataInventoryStatusDto): Promise<DataInventory>;
    createRetentionPolicy(dto: CreateRetentionPolicyDto): Promise<RetentionPolicy>;
    updateRetentionPolicy(id: string, dto: UpdateRetentionPolicyDto): Promise<RetentionPolicy>;
    getRetentionPolicies(): Promise<RetentionPolicy[]>;
    logConsent(dto: LogConsentDto): Promise<ConsentLog>;
    updateConsentStatus(id: string, dto: UpdateConsentStatusDto): Promise<ConsentLog>;
    getConsentLogs(userId?: string): Promise<ConsentLog[]>;
    getConsentLogById(id: string): Promise<ConsentLog | null>;
    syncCookiePreferences(dto: SyncCookiePreferencesDto): Promise<CookiePreference>;
    getCookiePreferences(userId: string): Promise<CookiePreference | null>;
    listDsarRequests(userId?: string): Promise<DsarRequest[]>;
    requestAccess(dto: CreateDsarRequestDto): Promise<DsarRequest>;
    requestRectification(dto: CreateDsarRequestDto): Promise<DsarRequest>;
    requestErasure(dto: CreateDsarRequestDto): Promise<DsarRequest>;
    resolveDsarRequest(id: string, dto: ResolveDsarRequestDto): Promise<DsarRequest>;
    getAuditLogs(limit?: number): Promise<PrivacyAuditLog[]>;
    handleAutomatedRetentionSweep(): Promise<void>;
    processRetentionSweep(actor: string): Promise<void>;
    private anonymizeDataEntry;
    private purgeDataEntry;
    private recordAudit;
}
export {};
